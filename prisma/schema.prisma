// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Note {
    id        String   @id @default(cuid()) @db.VarChar(36)
    title     String   @db.VarChar(255)
    content   String   @db.Text
    userId    String   @db.VarChar(36)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @db.VarChar(36)
    userId            String  @db.VarChar(36)
    type              String  @db.VarChar(40)
    provider          String  @db.VarChar(255)
    providerAccountId String  @db.VarChar(255)
    refresh_token     String? @db.VarChar(255)
    access_token      String? @db.VarChar(255)
    expires_at        Int?
    token_type        String? @db.VarChar(40)
    scope             String? @db.VarChar(255)
    id_token          String? @db.VarChar(255)
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @db.VarChar(36)
    sessionToken String   @unique
    userId       String   @db.VarChar(36)
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid()) @db.VarChar(36)
    fingerprint     String?   @db.VarChar(255)
    name            String?   @db.VarChar(255)
    email           String?   @unique
    emailVerifiedAt DateTime?
    lastVisitedAt   DateTime?
    image           String?   @db.VarChar(510)
    accounts        Account[]
    sessions        Session[]
    notes           Note[]
}

model VerificationToken {
    identifier String   @db.VarChar(40)
    token      String   @unique @db.VarChar(255)
    expires    DateTime

    @@unique([identifier, token])
}
